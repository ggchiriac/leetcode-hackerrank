{"id":578215139,"lang":"python3","time":"9 months, 2 weeks","timestamp":1635370561,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/578215139/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"14.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n#\n# Recursive:\n# class Solution:\n#     def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n#         if root is None:\n#             return []\n#         if root.left is None and root.right is None:\n#             return [root.val]\n#         else:\n#             return [root.val] + Solution.preorderTraversal(self, root.left) + Solution.preorderTraversal(self, root.right)\n#\n# Iterative:\nclass Solution:\n    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        values = []\n        nodes = []\n        node = root\n        prev = TreeNode(0, root, None)\n        ok = 0\n        while ok is 0 and node is not None:\n            ok = 1\n            prev = root\n            node = root\n            if node not in nodes:\n                nodes.append(node)\n                values.append(node.val)\n                ok = 0\n            while node.left is not None or node.right is not None:\n                if node.left is not None:\n                    prev = node\n                    node = node.left\n                    if node not in nodes:\n                        nodes.append(node)\n                        values.append(node.val)\n                        ok = 0\n                elif node.right is not None:\n                    prev = node\n                    node = node.right\n                    if node not in nodes:\n                        nodes.append(node)\n                        values.append(node.val)\n                        ok = 0\n            if node == prev.left:\n                prev.left = None\n                ok = 0\n            elif node == prev.right:\n                prev.right = None\n                ok = 0\n        return values","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal"}