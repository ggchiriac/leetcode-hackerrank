{"id":588308134,"lang":"python3","time":"8 months, 3 weeks","timestamp":1637108925,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/588308134/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def isUnival(self, root):\n        if root is None:\n            return True\n        if root.left is None and root.right is None:\n            return True\n        if root.right is None:\n            return (root.val == root.left.val\n                   and Solution.isUnival(self, root.left)\n                   and Solution.isUnival(self, root.right))\n        if root.left is None:\n            return (root.val == root.right.val\n                    and Solution.isUnival(self, root.left)\n                    and Solution.isUnival(self, root.right))   \n        return (root.val == root.left.val\n                and root.val == root.right.val\n                and Solution.isUnival(self, root.left)\n                and Solution.isUnival(self, root.right))\n        \n    def countUnivalSubtrees(self, root: Optional[TreeNode]) -> int:\n        if root is None: \n            return 0;\n        if root.left is None and root.right is None:\n            return 1;\n        current = 0\n        if Solution.isUnival(self, root):\n            current = 1\n        return current + Solution.countUnivalSubtrees(self, root.left) + Solution.countUnivalSubtrees(self, root.right)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees"}