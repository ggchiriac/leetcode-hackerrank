{"id":588288984,"lang":"python3","time":"8 months, 3 weeks","timestamp":1637105309,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/588288984/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"14.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    \n    def preorder(self, root, arr):\n        if root is None:\n            arr.append(None)\n            return\n        arr.append(root.val)\n        Solution.preorder(self, root.left, arr)\n        Solution.preorder(self, root.right, arr)\n        \n    def inverseorder(self, root, arr):\n        if root is None:\n            arr.append(None)\n            return\n        arr.append(root.val)\n        Solution.inverseorder(self, root.right, arr)\n        Solution.inverseorder(self, root.left, arr)\n    \n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if root.left is None and root.right is None:\n            return True\n        left = []\n        right = []\n        Solution.preorder(self, root.left, left)\n        Solution.inverseorder(self, root.right, right)\n        if len(left) != len(right):\n            return False\n        for i in range(len(left)):\n            if left[i] != right[i]:\n                return False\n        return True","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree"}