{"id":610868332,"lang":"python3","time":"7 months, 1 week","timestamp":1641051832,"status_display":"Accepted","runtime":"2509 ms","url":"/submissions/detail/610868332/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"419.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        def recurse(node: 'TreeNode', path: List):\n            nonlocal pathP\n            nonlocal pathQ \n            \n            if node == p:\n                pathP = path + [node]\n            elif node == q:\n                pathQ = path + [node]\n            if node.left is None and node.right is None:\n                return\n\n            if node.left is not None:\n                recurse(node.left, path + [node])\n                \n            if node.right is not None:    \n                recurse(node.right, path + [node])\n          \n        pathP = []\n        pathQ = []\n        recurse(root, [])\n        setQ = set(pathQ)\n        for i in range(len(pathP) - 1, -1, -1):\n            if pathP[i] in setQ:\n                return pathP[i]\n                \n        ","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}