{"id":588773490,"lang":"python3","time":"8 months, 3 weeks","timestamp":1637187010,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/588773490/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"18.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\n        def helper(lIndex, rIndex):\n            if lIndex > rIndex:\n                return None\n            \n            value = preorder[0]\n            preorder.remove(preorder[0])\n            root = TreeNode(value)\n            index = hashMap[root.val]\n            \n            root.left = helper(lIndex, index - 1)\n            root.right = helper(index + 1, rIndex)\n            return root\n        \n        hashMap = {value:index for index, value in enumerate(inorder)}\n        return helper(0, len(inorder) - 1)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal"}