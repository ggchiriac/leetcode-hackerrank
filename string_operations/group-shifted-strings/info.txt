{"id":631694227,"lang":"java","time":"6 months, 1 week","timestamp":1643648017,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/631694227/","is_pending":"Not Pending","title":"Group Shifted Strings","memory":"42.1 MB","code":"class Solution {\n    public List<List<String>> groupStrings(String[] strings) {\n        List<List<String>> result = new ArrayList();\n        Map<String, List<String>> map = new HashMap();\n        for(int i = 0; i < strings.length; ++i) {\n            String key = hash(strings[i]);\n            \n            if(map.containsKey(key)) map.get(key).add(strings[i]);\n            else {\n                List<String> list = new ArrayList();\n                list.add(strings[i]);\n                map.put(key, list);\n            }\n        }\n        \n        for(String i : map.keySet()) {\n            List<String> current = new ArrayList();\n            current.addAll(map.get(i));\n            result.add(current);\n        }\n        return result;\n    }\n    \n    public String hash(String s) {\n        char[] letters = s.toCharArray();\n        int shift = letters[0];\n        for(int i = 0; i < letters.length; ++i) {\n            letters[i] = (char) ((letters[i] - shift + 26) % 26 + 'a');\n        }\n        return String.valueOf(letters);\n    }\n}","compare_result":"11111111111111111111111","title_slug":"group-shifted-strings"}