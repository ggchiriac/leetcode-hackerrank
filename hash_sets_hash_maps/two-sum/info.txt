{"id":631763386,"lang":"java","time":"6 months, 1 week","timestamp":1643654993,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/631763386/","is_pending":"Not Pending","title":"Two Sum","memory":"50 MB","code":"class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int sum = 0;\n        Map<Integer,List<Integer>> indexes = new HashMap();\n        for(int i = 0; i < nums.length; ++i) { \n            if(indexes.containsKey(nums[i])) indexes.get(nums[i]).add(i);\n            else {\n                List<Integer> list = new ArrayList();\n                list.add(i);\n                indexes.put(nums[i], list);\n            }\n        }\n        \n        quickSort(nums, 0, nums.length - 1);\n        \n        int i = 0, j = nums.length - 1;\n        while(i < j) {\n            int current = nums[i] + nums[j];\n            if(current < target) i++;\n            else if(current > target) j--;\n                 else {\n                     int[] result = new int[2];\n                     if(nums[i] == nums[j]) {\n                         result[0] = indexes.get(nums[i]).get(0);\n                         result[1] = indexes.get(nums[i]).get(1);\n                     } else {\n                         result[0] = indexes.get(nums[i]).get(0);\n                         result[1] = indexes.get(nums[j]).get(0);\n                     }\n                     return result;\n                 }\n        }\n        return new int[2];\n    }\n    \n    public void quickSort(int[] nums, int start, int end) {\n        if(start >= end) return;\n        \n        int pos = partition(nums, start, end);\n        \n        quickSort(nums, start, pos - 1);\n        quickSort(nums, pos + 1, end);\n    }\n    \n    public int partition(int[] nums, int start, int end) {\n        int pivot = nums[end];\n        int i = start - 1;\n        for(int j = i + 1; j < end; j++) {\n            if(nums[j] <= pivot) {\n                i++;\n                int aux = nums[j];\n                nums[j] = nums[i];\n                nums[i] = aux;\n            }\n        }\n        int aux = nums[i + 1];\n        nums[i + 1] = pivot;\n        nums[end] = aux;\n        \n        return i + 1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"two-sum"}