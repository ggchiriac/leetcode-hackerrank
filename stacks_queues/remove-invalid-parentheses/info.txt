{"id":610480149,"lang":"python3","time":"7 months, 1 week","timestamp":1640976412,"status_display":"Accepted","runtime":"3152 ms","url":"/submissions/detail/610480149/","is_pending":"Not Pending","title":"Remove Invalid Parentheses","memory":"14.5 MB","code":"class Solution:\n    def removeInvalidParentheses(self, s: str) -> List[str]:\n        ans = []\n\n        def countMistakes(s: str) -> List[int]:\n            countLeft = 0\n            countRight = 0\n            for char in s:\n                if char == \"(\":\n                    countLeft += 1\n                elif char == \")\":\n                    if countLeft > 0:\n                        countLeft -= 1\n                    else:\n                        countRight += 1\n            return [countLeft, countRight]\n        \n        result = {}\n        def recurse(s, index, left_count, right_count, left_rem, right_rem, expr):\n            if index == len(s):\n                if left_rem == 0 and right_rem == 0:\n                    ans = \"\".join(expr)                    \n                    result[ans] = 1\n            else:\n                if (s[index] == '(' and left_rem > 0) or (s[index] == ')' and right_rem > 0):\n                    recurse(s, index + 1,                            left_count,\n                            right_count,\n                            left_rem - (s[index] == '('),\n                            right_rem - (s[index] == ')'), expr)\n\n                expr.append(s[index])    \n\n                if s[index] != '(' and s[index] != ')':\n                    recurse(s, index + 1,\n                            left_count,\n                            right_count,                            \n                            left_rem,\n                            right_rem, expr)\n                elif s[index] == '(':\n                    # Consider an opening bracket.\n                    recurse(s, index + 1,\n                            left_count + 1,\n                            right_count,\n                            left_rem,\n                            right_rem, expr)\n                elif s[index] == ')' and left_count > right_count:\n                    # Consider a closing bracket.\n                    recurse(s, index + 1,\n                            left_count,\n                            right_count + 1,\n                            left_rem,\n                            right_rem, expr)\n\n                # Pop for backtracking.\n                expr.pop()                 \n\n        # Now, the left and right variables tell us the number of misplaced left and\n        # right parentheses and that greatly helps pruning the recursion.        \n        recurse(s, 0, 0, 0, countMistakes(s)[0], countMistakes(s)[1], [])     \n        return list(result.keys())","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-invalid-parentheses"}